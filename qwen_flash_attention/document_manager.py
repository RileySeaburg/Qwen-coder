import logging
from typing import Dict, Any, List, Optional, cast
from pydantic import BaseModel, Field
from fastapi import Request, HTTPException
from .rag_agent import RAGAgent, MongoDocument

logger = logging.getLogger(__name__)

class Document(BaseModel):
    text: str
    metadata: Dict[str, Any] = Field(default_factory=dict)

class AddDocumentsRequest(BaseModel):
    documents: List[Document]
    source: str = Field(..., description="Source identifier for the documents")

class AddDocumentsResponse(BaseModel):
    success: bool
    message: str
    document_ids: List[str]

class DocumentManager:
    """Manages document operations including adding documents with embeddings."""

    def __init__(self, request: Request):
        self.request = request
        self.rag_agent = None

    async def initialize(self):
        """Initialize the document manager."""
        if not self.rag_agent:
            if not hasattr(self.request.app.state, "embedding_model"):
                raise HTTPException(
                    status_code=500,
                    detail="Embedding model not initialized"
                )
            
            self.rag_agent = RAGAgent(request=self.request)
            await self.rag_agent.initialize()

    async def add_documents(self, request: AddDocumentsRequest) -> AddDocumentsResponse:
        """Add documents to the knowledge base with embeddings."""
        try:
            await self.initialize()

            # Convert documents to MongoDocument format
            mongo_docs: List[MongoDocument] = [
                {
                    "text": doc.text,
                    "embedding": [],  # Will be generated by RAGAgent
                    "metadata": doc.metadata
                }
                for doc in request.documents
            ]

            # Add documents
            doc_ids = await self.rag_agent.add_documents(mongo_docs, request.source)

            if not doc_ids:
                return AddDocumentsResponse(
                    success=False,
                    message="No documents were added",
                    document_ids=[]
                )

            return AddDocumentsResponse(
                success=True,
                message=f"Successfully added {len(doc_ids)} documents",
                document_ids=[str(id) for id in doc_ids]
            )

        except Exception as e:
            logger.error(f"Error adding documents: {e}")
            raise HTTPException(
                status_code=500,
                detail=str(e)
            )
