import logging
from typing import Dict, Any, List, Optional, Sequence, cast
from typing_extensions import TypedDict
from fastapi import Request
from .rag_agent import RAGAgent, SearchResult, MongoDocument
from .schemas import Message

logger = logging.getLogger(__name__)

class RAGProvider:
    """Provider for RAG functionality using vector store."""
    
    def __init__(self, mongodb_config: Dict[str, Any], request: Optional[Request] = None):
        self.rag_agent = RAGAgent(
            mongodb_url=mongodb_config.get("url", "mongodb://localhost:27017"),
            database_name=mongodb_config.get("database", "shared_vectors"),
            collection_name=mongodb_config.get("collection", "embeddings"),
            request=request
        )
        self.initialized = False

    async def initialize(self):
        """Initialize the RAG provider."""
        if not self.initialized:
            await self.rag_agent.initialize()
            self.initialized = True
            logger.info("RAG provider initialized")

    async def get_context(self, query: str, num_results: int = 3) -> List[Dict[str, Any]]:
        """Get relevant context for a query."""
        if not self.initialized:
            await self.initialize()
        
        results = await self.rag_agent.search_similar(
            query=query,
            num_results=num_results
        )
        # Convert SearchResult to Dict[str, Any]
        return [dict(result) for result in results]

    async def enhance_messages(self, messages: List[Message]) -> List[Message]:
        """Enhance messages with relevant context."""
        if not self.initialized:
            await self.initialize()

        # Get the latest user message
        user_message = next((msg for msg in reversed(messages) if msg.role == "user"), None)
        if not user_message:
            return messages

        # Get relevant context
        context = await self.get_context(user_message.content)
        if not context:
            return messages

        # Format context message
        context_text = "Relevant information from knowledge base:\n\n"
        for i, item in enumerate(context, 1):
            context_text += f"{i}. {item['text']}\n"
            if item['metadata'].get('source'):
                context_text += f"   Source: {item['metadata']['source']}\n"
            context_text += "\n"

        # Insert context before user message
        enhanced_messages = messages.copy()
        insert_idx = next(
            (i for i, msg in enumerate(enhanced_messages) if msg == user_message),
            len(enhanced_messages)
        )
        enhanced_messages.insert(insert_idx, Message(
            role="system",
            content=context_text,
            name="context"
        ))

        return enhanced_messages

    async def add_to_knowledge_base(self, documents: List[Dict[str, Any]], source: str) -> List[str]:
        """Add documents to the knowledge base."""
        if not self.initialized:
            await self.initialize()
        
        # Convert documents to MongoDocument format
        mongo_docs: List[MongoDocument] = []
        for doc in documents:
            mongo_doc: MongoDocument = {
                "text": doc["text"],
                "embedding": [],  # Will be generated by RAGAgent
                "metadata": doc.get("metadata", {})
            }
            mongo_docs.append(mongo_doc)
        
        return await self.rag_agent.add_documents(mongo_docs, source)

    def __del__(self):
        """Cleanup resources."""
        try:
            del self.rag_agent
            logger.info("RAG provider cleaned up")
        except:
            pass
